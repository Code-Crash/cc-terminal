{"ast":null,"code":"import _classCallCheck from \"/Users/pravin/workspace/code-world/cc-terminal/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/pravin/workspace/code-world/cc-terminal/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { ElementRef, Renderer2 } from '@angular/core';\nimport { CcTerminalService } from './cc-terminal.service';\nimport { CommandStore } from './cc-terminal-command-store';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./cc-terminal.service\";\nimport * as i2 from \"./cc-terminal-command-store\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nvar _c0 = [\"cc_terminal\"];\nvar _c1 = [\"cc_terminal_viewport\"];\nvar _c2 = [\"cc_terminal_results\"];\nvar _c3 = [\"cc_terminal_target\"];\n\nfunction CcTerminalComponent_span_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 11);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3._prompt == null ? null : ctx_r3._prompt.text, \" \");\n  }\n}\n\nfunction CcTerminalComponent_span_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngStyle\", ctx_r4.ccStyle == null ? null : ctx_r4.ccStyle.input);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r4._command, \" \");\n  }\n}\n\nfunction CcTerminalComponent_span_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 13);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngStyle\", ctx_r5.ccStyle == null ? null : ctx_r5.ccStyle.cursor);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r5._cursor, \" \");\n  }\n}\n\nexport var CcTerminalComponent = /*#__PURE__*/(function () {\n  var CcTerminalComponent = /*#__PURE__*/function () {\n    function CcTerminalComponent(_tService, renderer, store) {\n      var _this = this;\n\n      _classCallCheck(this, CcTerminalComponent);\n\n      this.renderer = renderer;\n      this.store = store;\n      this.title = 'cc-terminal';\n      this.ngUnsubscribe = new Subject(); // https://stackoverflow.com/questions/38008334/angular-rxjs-when-should-i-unsubscribe-from-subscription/41177163#41177163\n\n      this._command = '';\n      this._cursor = '_';\n      this._results = [];\n      this._showPrompt = true;\n      this._cmdHistory = [];\n      this._cmdIndex = -1;\n      this._initial = true;\n      this._mOver = false; // Mouse Over\n\n      this._prevLength = 0;\n      /**\n       * @description - This function will help you to register the commands\n       */\n\n      this._registerCommand = function () {\n        // Clear Command to clear the terminal\n        _this.store.addCommand({\n          name: 'clear',\n          details: {\n            result: [],\n            readonly: true,\n            output: false\n          },\n          callback: function callback() {\n            _this._results.splice(0, _this._results.length);\n\n            CcTerminalComponent._clearTerminalResultsChildElements();\n          }\n        }); // Reset Command to reset the terminal\n\n\n        _this.store.addCommand({\n          name: 'reset',\n          details: {\n            result: [],\n            readonly: true,\n            output: false\n          },\n          callback: function callback() {\n            _this._initializeConfig();\n\n            _this._results = [];\n\n            CcTerminalComponent._clearTerminalResultsChildElements();\n\n            _this._initial = true; // this.ngOnInit();\n\n            _this.ngOnInit();\n\n            _this._blur();\n\n            _this._clickHandler();\n          }\n        });\n      };\n\n      this._initializeConfig();\n\n      this._tService = _tService;\n      this._prompt = _tService.initPrompt(this._config);\n      this._outputDelay = this._config.outputDelay;\n      this._allowTypingWriteDisplaying = this._config.allowTypingWriteDisplaying;\n      this._disposableOutputObserver = _tService.on('terminal-output').subscribe(function (termOut) {\n        if (!termOut.added) {\n          termOut.added = true; // TODO: We are not using this, we storing this commands in history, may be we can think of something to perform\n\n          _this._results.push(termOut);\n        }\n      });\n\n      this._tService.broadcast('store-ready', this.store); // BroadCast to let all component know that store is ready to use.\n\n\n      this._registerCommand(); // Register commands which will help to do the terminal operation\n\n\n      this._disposableCommandObserver = _tService.on('terminal-command').subscribe(function (cmd) {\n        _tService.interpret(cmd);\n      });\n    }\n    /**\n     * @description - adds \\n to all strings that need formatting at index of string\n     *              - function is not able to break line twice in case the remaining string is still longer than\n     *              - screen -> but it would be best this does not happen -> maybe require min width of terminal div\n     * @param width - width\n     * @param text  - text\n     * @param chr - character\n     */\n\n\n    _createClass(CcTerminalComponent, [{\n      key: \"_initializeConfig\",\n      value: function _initializeConfig() {\n        this._command = '';\n        this._nonPrintRE = /[\\0-\\x1F\\x7F-\\x9F\\xAD\\u0378\\u0379\\u037F-\\u0383\\u038B\\u038D\\u03A2\\u0528-\\u0530\\u0557\\u0558\\u0560\\u0588\\u058B-\\u058E\\u0590\\u05C8-\\u05CF\\u05EB-\\u05EF\\u05F5-\\u0605\\u061C\\u061D\\u06DD\\u070E\\u070F\\u074B\\u074C\\u07B2-\\u07BF\\u07FB-\\u07FF\\u082E\\u082F\\u083F\\u085C\\u085D\\u085F-\\u089F\\u08A1\\u08AD-\\u08E3\\u08FF\\u0978\\u0980\\u0984\\u098D\\u098E\\u0991\\u0992\\u09A9\\u09B1\\u09B3-\\u09B5\\u09BA\\u09BB\\u09C5\\u09C6\\u09C9\\u09CA\\u09CF-\\u09D6\\u09D8-\\u09DB\\u09DE\\u09E4\\u09E5\\u09FC-\\u0A00\\u0A04\\u0A0B-\\u0A0E\\u0A11\\u0A12\\u0A29\\u0A31\\u0A34\\u0A37\\u0A3A\\u0A3B\\u0A3D\\u0A43-\\u0A46\\u0A49\\u0A4A\\u0A4E-\\u0A50\\u0A52-\\u0A58\\u0A5D\\u0A5F-\\u0A65\\u0A76-\\u0A80\\u0A84\\u0A8E\\u0A92\\u0AA9\\u0AB1\\u0AB4\\u0ABA\\u0ABB\\u0AC6\\u0ACA\\u0ACE\\u0ACF\\u0AD1-\\u0ADF\\u0AE4\\u0AE5\\u0AF2-\\u0B00\\u0B04\\u0B0D\\u0B0E\\u0B11\\u0B12\\u0B29\\u0B31\\u0B34\\u0B3A\\u0B3B\\u0B45\\u0B46\\u0B49\\u0B4A\\u0B4E-\\u0B55\\u0B58-\\u0B5B\\u0B5E\\u0B64\\u0B65\\u0B78-\\u0B81\\u0B84\\u0B8B-\\u0B8D\\u0B91\\u0B96-\\u0B98\\u0B9B\\u0B9D\\u0BA0-\\u0BA2\\u0BA5-\\u0BA7\\u0BAB-\\u0BAD\\u0BBA-\\u0BBD\\u0BC3-\\u0BC5\\u0BC9\\u0BCE\\u0BCF\\u0BD1-\\u0BD6\\u0BD8-\\u0BE5\\u0BFB-\\u0C00\\u0C04\\u0C0D\\u0C11\\u0C29\\u0C34\\u0C3A-\\u0C3C\\u0C45\\u0C49\\u0C4E-\\u0C54\\u0C57\\u0C5A-\\u0C5F\\u0C64\\u0C65\\u0C70-\\u0C77\\u0C80\\u0C81\\u0C84\\u0C8D\\u0C91\\u0CA9\\u0CB4\\u0CBA\\u0CBB\\u0CC5\\u0CC9\\u0CCE-\\u0CD4\\u0CD7-\\u0CDD\\u0CDF\\u0CE4\\u0CE5\\u0CF0\\u0CF3-\\u0D01\\u0D04\\u0D0D\\u0D11\\u0D3B\\u0D3C\\u0D45\\u0D49\\u0D4F-\\u0D56\\u0D58-\\u0D5F\\u0D64\\u0D65\\u0D76-\\u0D78\\u0D80\\u0D81\\u0D84\\u0D97-\\u0D99\\u0DB2\\u0DBC\\u0DBE\\u0DBF\\u0DC7-\\u0DC9\\u0DCB-\\u0DCE\\u0DD5\\u0DD7\\u0DE0-\\u0DF1\\u0DF5-\\u0E00\\u0E3B-\\u0E3E\\u0E5C-\\u0E80\\u0E83\\u0E85\\u0E86\\u0E89\\u0E8B\\u0E8C\\u0E8E-\\u0E93\\u0E98\\u0EA0\\u0EA4\\u0EA6\\u0EA8\\u0EA9\\u0EAC\\u0EBA\\u0EBE\\u0EBF\\u0EC5\\u0EC7\\u0ECE\\u0ECF\\u0EDA\\u0EDB\\u0EE0-\\u0EFF\\u0F48\\u0F6D-\\u0F70\\u0F98\\u0FBD\\u0FCD\\u0FDB-\\u0FFF\\u10C6\\u10C8-\\u10CC\\u10CE\\u10CF\\u1249\\u124E\\u124F\\u1257\\u1259\\u125E\\u125F\\u1289\\u128E\\u128F\\u12B1\\u12B6\\u12B7\\u12BF\\u12C1\\u12C6\\u12C7\\u12D7\\u1311\\u1316\\u1317\\u135B\\u135C\\u137D-\\u137F\\u139A-\\u139F\\u13F5-\\u13FF\\u169D-\\u169F\\u16F1-\\u16FF\\u170D\\u1715-\\u171F\\u1737-\\u173F\\u1754-\\u175F\\u176D\\u1771\\u1774-\\u177F\\u17DE\\u17DF\\u17EA-\\u17EF\\u17FA-\\u17FF\\u180F\\u181A-\\u181F\\u1878-\\u187F\\u18AB-\\u18AF\\u18F6-\\u18FF\\u191D-\\u191F\\u192C-\\u192F\\u193C-\\u193F\\u1941-\\u1943\\u196E\\u196F\\u1975-\\u197F\\u19AC-\\u19AF\\u19CA-\\u19CF\\u19DB-\\u19DD\\u1A1C\\u1A1D\\u1A5F\\u1A7D\\u1A7E\\u1A8A-\\u1A8F\\u1A9A-\\u1A9F\\u1AAE-\\u1AFF\\u1B4C-\\u1B4F\\u1B7D-\\u1B7F\\u1BF4-\\u1BFB\\u1C38-\\u1C3A\\u1C4A-\\u1C4C\\u1C80-\\u1CBF\\u1CC8-\\u1CCF\\u1CF7-\\u1CFF\\u1DE7-\\u1DFB\\u1F16\\u1F17\\u1F1E\\u1F1F\\u1F46\\u1F47\\u1F4E\\u1F4F\\u1F58\\u1F5A\\u1F5C\\u1F5E\\u1F7E\\u1F7F\\u1FB5\\u1FC5\\u1FD4\\u1FD5\\u1FDC\\u1FF0\\u1FF1\\u1FF5\\u1FFF\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u206F\\u2072\\u2073\\u208F\\u209D-\\u209F\\u20BB-\\u20CF\\u20F1-\\u20FF\\u218A-\\u218F\\u23F4-\\u23FF\\u2427-\\u243F\\u244B-\\u245F\\u2700\\u2B4D-\\u2B4F\\u2B5A-\\u2BFF\\u2C2F\\u2C5F\\u2CF4-\\u2CF8\\u2D26\\u2D28-\\u2D2C\\u2D2E\\u2D2F\\u2D68-\\u2D6E\\u2D71-\\u2D7E\\u2D97-\\u2D9F\\u2DA7\\u2DAF\\u2DB7\\u2DBF\\u2DC7\\u2DCF\\u2DD7\\u2DDF\\u2E3C-\\u2E7F\\u2E9A\\u2EF4-\\u2EFF\\u2FD6-\\u2FEF\\u2FFC-\\u2FFF\\u3040\\u3097\\u3098\\u3100-\\u3104\\u312E-\\u3130\\u318F\\u31BB-\\u31BF\\u31E4-\\u31EF\\u321F\\u32FF\\u4DB6-\\u4DBF\\u9FCD-\\u9FFF\\uA48D-\\uA48F\\uA4C7-\\uA4CF\\uA62C-\\uA63F\\uA698-\\uA69E\\uA6F8-\\uA6FF\\uA78F\\uA794-\\uA79F\\uA7AB-\\uA7F7\\uA82C-\\uA82F\\uA83A-\\uA83F\\uA878-\\uA87F\\uA8C5-\\uA8CD\\uA8DA-\\uA8DF\\uA8FC-\\uA8FF\\uA954-\\uA95E\\uA97D-\\uA97F\\uA9CE\\uA9DA-\\uA9DD\\uA9E0-\\uA9FF\\uAA37-\\uAA3F\\uAA4E\\uAA4F\\uAA5A\\uAA5B\\uAA7C-\\uAA7F\\uAAC3-\\uAADA\\uAAF7-\\uAB00\\uAB07\\uAB08\\uAB0F\\uAB10\\uAB17-\\uAB1F\\uAB27\\uAB2F-\\uABBF\\uABEE\\uABEF\\uABFA-\\uABFF\\uD7A4-\\uD7AF\\uD7C7-\\uD7CA\\uD7FC-\\uF8FF\\uFA6E\\uFA6F\\uFADA-\\uFAFF\\uFB07-\\uFB12\\uFB18-\\uFB1C\\uFB37\\uFB3D\\uFB3F\\uFB42\\uFB45\\uFBC2-\\uFBD2\\uFD40-\\uFD4F\\uFD90\\uFD91\\uFDC8-\\uFDEF\\uFDFE\\uFDFF\\uFE1A-\\uFE1F\\uFE27-\\uFE2F\\uFE53\\uFE67\\uFE6C-\\uFE6F\\uFE75\\uFEFD-\\uFF00\\uFFBF-\\uFFC1\\uFFC8\\uFFC9\\uFFD0\\uFFD1\\uFFD8\\uFFD9\\uFFDD-\\uFFDF\\uFFE7\\uFFEF-\\uFFFB\\uFFFE\\uFFFF]/g;\n        this._config = {\n          outputDelay: 8,\n          allowTypingWriteDisplaying: true,\n          maxHistory: 50,\n          typeSoundUrl: './assets/type.wav',\n          startSoundUrl: './assets/start.wav',\n          promptConfiguration: {\n            end: ':>',\n            user: 'CodeCrash',\n            separator: '@',\n            path: '\\\\'\n          }\n        };\n      }\n    }, {\n      key: \"_handlePaste\",\n      value: function _handlePaste(e) {\n        var _this2 = this;\n\n        function is_type(item, type) {\n          return item.type.indexOf(type) !== -1;\n        }\n\n        if (e.clipboardData) {\n          var items = e.clipboardData.items;\n\n          if (items) {\n            for (var i = 0; i < items.length; i++) {\n              if (is_type(items[i], 'image')) {\n                this._tService.broadcast('terminal-output', {\n                  details: {\n                    output: true,\n                    result: [{\n                      text: this._prompt.text + this._command\n                    }, {\n                      text: 'You can\\'t paste file'\n                    }],\n                    breakLine: true\n                  }\n                });\n              } else if (is_type(items[i], 'text/plain')) {\n                items[i].getAsString(function (string, stay) {\n                  _this2._command = string;\n                });\n              }\n            }\n          } else if (e.clipboardData.getData) {\n            var text = e.clipboardData.getData('text/plain');\n            this._command = text;\n          }\n\n          return false;\n        }\n      }\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this._aContext = new AudioContext();\n\n        this._doSound(this._config.startSoundUrl);\n\n        this.store.addKeyValue({\n          name: 'author',\n          key: 'output',\n          value: true\n        }); // Note: We can't modify read only properties\n        // if (this.ccStyle && this.ccStyle.section) {\n        //   Object.keys(this.ccStyle.section || {}).forEach((key) => {\n        //     // Only allow background and color in section css style\n        //     if (key !== 'color' && key !== 'background') {\n        //       delete this.ccStyle.section[key];\n        //     }\n        //   });\n        // }\n        // if (this.ccStyle && this.ccStyle.viewport) {\n        //   Object.keys(this.ccStyle.viewport || {}).forEach((key) => {\n        //     // Only allow background and color in viewport css style\n        //     if (key !== 'color' && key !== 'background') {\n        //       delete this.ccStyle.viewport[key];\n        //     }\n        //   });\n        // }\n        // console.log('ccStyle:', this.ccStyle);\n        // console.log('ccPrompt:', this.ccPrompt);\n\n        if (this.ccPrompt) {\n          this._prompt = this._tService.initPrompt({\n            promptConfiguration: this.ccPrompt\n          });\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        // Clear Observable allocation of memory.\n        this._disposableOutputObserver.unsubscribe();\n\n        this._disposableCommandObserver.unsubscribe(); // Clear Storage allocation of memory.\n\n\n        this.ngUnsubscribe.next(true);\n        this.ngUnsubscribe.complete();\n      }\n    }, {\n      key: \"ngDoCheck\",\n      value: function ngDoCheck() {\n        // simple added to array detection\n        if (this._prevLength < this._results.length) {\n          // check if history grows too big then maxHistory\n          if (this._results.length > this._config.maxHistory) {\n            this._results.splice(0, 1);\n\n            this.terminalResults.nativeElement.children[0].remove();\n          }\n\n          this._addToTerminalResults();\n        }\n\n        this._prevLength = this._results.length;\n      }\n      /**\n       * @description - This will add the output on the terminal\n       * TODO: We need to simulate the commands which is not added on terminal output\n       *\n       * TODO: @example  -\n       *\n       *            this.store.addCommand({\n       *              name: 'example',\n       *               details: {\n       *                 breakLine: true,\n       *                 output: true, // Output false have error\n       *                 readonly: false,\n       *                 result: [{\n       *                   text: () => {\n       *                     return 10 + 10;\n       *                   }\n       *                 }],\n       *               },\n       *               callback: () => {\n       *                 this._tService.broadcast('terminal-command', { command: 'help' });\n       *                 this._tService.broadcast('terminal-output', {\n       *                   details: {\n       *                     output: true,\n       *                     breakLine: true,\n       *                     result: [\n       *                       { text: 'yum yum' }\n       *                     ]\n       *                   }\n       *                 });\n       *                 alert('done');\n       *               }\n       *            });\n       */\n\n    }, {\n      key: \"_addToTerminalResults\",\n      value: function _addToTerminalResults() {\n        var _this3 = this;\n\n        var _handlePromptScroll = [function () {\n          _this3._showPrompt = true; // while rendering output, hide prompt\n\n          _this3.terminalViewport.nativeElement.scrollTop = _this3.terminalViewport.nativeElement.scrollHeight; // always put scroll to bottom\n        }];\n        this._showPrompt = false;\n        var change = this._results[this._results.length - 1].details;\n        var spanElement = this.renderer.createElement('span');\n\n        if (this._outputDelay) {\n          for (var i = change.result.length - 1; i >= 0; i--) {\n            // only reverse loop will type out the lines with delay proper and in order\n            this._createTypedOutputElement(spanElement, change, i, _handlePromptScroll);\n          }\n\n          setTimeout(function () {\n            _handlePromptScroll[_handlePromptScroll.length - 1]();\n          }, 200);\n        } else {\n          this._showPrompt = true;\n\n          for (var _i = 0; _i < change.result.length; _i++) {\n            // paste everything at once\n            this._createOutputElement(spanElement, change, _i);\n          }\n\n          if (change.breakLine) {\n            var breakLine = this.renderer.createElement('br');\n            spanElement.appendChild(breakLine);\n          }\n        }\n      }\n    }, {\n      key: \"setScrollToViewPort\",\n      value: function setScrollToViewPort() {\n        if (this.terminalViewport) {\n          this.terminalViewport.nativeElement.scrollTop = this.terminalViewport.nativeElement.scrollHeight;\n        }\n      }\n      /**\n       * @description - This will will create a command typed to command prompt and do print on output\n       */\n\n    }, {\n      key: \"_createTypedOutputElement\",\n      value: function _createTypedOutputElement(span, change, i, _handlePromptScroll) {\n        var _this4 = this;\n\n        var lineBr = ' -> \\n ';\n\n        var _this$_createOutputLi = this._createOutputLineElement(change, i, lineBr),\n            line = _this$_createOutputLi.line,\n            textLine = _this$_createOutputLi.textLine;\n\n        if (change.output) {\n          // If output is enabled for the command, then only print it\n          line.textContent = ' ';\n          var fi = _handlePromptScroll.length - 1;\n          var wLine = line; // World Line\n\n          var wTextLine = textLine; // World Text Line\n\n          var wf = _handlePromptScroll[fi]; // to call the next _handlePromptScroll[i] recursively after previous line type has finished\n\n          var wBreak = i === change.result.length - 1 && change.breakLine; // World Break\n\n          _handlePromptScroll.push(function () {\n            span.appendChild(wLine); // initialize empty line to type out\n\n            _this4.terminalResults.nativeElement.appendChild(span);\n\n            _this4._type(wLine, wTextLine, 0, wf); // send line to type() so each character gets displayed coupled with a type sound\n\n\n            _this4.terminalViewport.nativeElement.scrollTop = _this4.terminalViewport.nativeElement.scrollHeight; // this.setScrollToViewPort();\n\n            if (wBreak) {\n              var breakLine = _this4.renderer.createElement('br');\n\n              span.appendChild(breakLine);\n\n              _this4.terminalResults.nativeElement.appendChild(span);\n            }\n          });\n        } else {// line.textContent = textLine;\n          // span.appendChild(line);\n          // this.terminalResults.nativeElement.appendChild(span);\n        }\n      }\n    }, {\n      key: \"_createOutputElement\",\n      value: function _createOutputElement(span, change, i) {\n        var lineBr = ' -> \\n';\n\n        var _this$_createOutputLi2 = this._createOutputLineElement(change, i, lineBr),\n            line = _this$_createOutputLi2.line,\n            textLine = _this$_createOutputLi2.textLine;\n\n        line.textContent = textLine;\n        span.appendChild(line);\n        this.terminalResults.nativeElement.appendChild(span);\n      }\n    }, {\n      key: \"_createOutputLineElement\",\n      value: function _createOutputLineElement(change, i, lineBr) {\n        var line = this.renderer.createElement('div');\n\n        if (change.result[i] && change.result[i]['css']) {\n          if (Object.keys(change.result[i]['css'] || {}).length) {\n            var style = '';\n            Object.keys(change.result[i]['css'] || {}).forEach(function (key) {\n              style += key + ':' + change.result[i]['css'][key] + ';';\n            });\n            line.style = style;\n          }\n        }\n\n        this.renderer.addClass(line, 'cc_terminal_line');\n        var textLine;\n        var elWidth = this.terminalViewport.nativeElement.firstElementChild.clientWidth; // format -> the stream needs formatting to show with appropriate line breaks on the screen\n\n        if (change.format) {\n          textLine = CcTerminalComponent._insertLineBreakToString(elWidth, change.result[i].text, lineBr);\n        } else {\n          textLine = change.result[i] && change.result[i].text || '';\n        }\n\n        return {\n          line: line,\n          textLine: textLine\n        };\n      }\n    }, {\n      key: \"_type\",\n      value: function _type(input, line, i, endCallback) {\n        var _this5 = this;\n\n        setTimeout(function () {\n          _this5._doSound(_this5._config.typeSoundUrl);\n\n          input.textContent += i < line.length ? line[i] : '';\n\n          if (i < line.length - 1) {\n            _this5._doSound(_this5._config.typeSoundUrl);\n\n            _this5._type(input, line, i + 1, endCallback);\n          } else if (endCallback) {\n            endCallback();\n          }\n        }, this._outputDelay);\n      }\n    }, {\n      key: \"_doSound\",\n      value: function _doSound(uri) {\n        var _this6 = this;\n\n        this._loadAudio(uri).then(function (_audioBuffer) {\n          _this6._aBuffer = _audioBuffer;\n\n          _this6._playAudio();\n        }).catch(function (error) {\n          throw error;\n        });\n      }\n    }, {\n      key: \"_loadAudio\",\n      value: function _loadAudio(source) {\n        var _this7 = this;\n\n        return new Promise(function (resolve, reject) {\n          _this7._tService.fetch(source).subscribe(function (buffer) {\n            _this7._aContext.decodeAudioData(buffer, resolve, reject);\n          });\n        });\n      }\n    }, {\n      key: \"_playAudio\",\n      value: function _playAudio() {\n        var bufferSource = this._aContext.createBufferSource();\n\n        bufferSource.buffer = this._aBuffer;\n        bufferSource.connect(this._aContext.destination);\n        bufferSource.start(0);\n      }\n    }, {\n      key: \"_mouseover\",\n      value: function _mouseover() {\n        this._mOver = true;\n      }\n    }, {\n      key: \"_mouseleave\",\n      value: function _mouseleave() {\n        this._mOver = false;\n      }\n    }, {\n      key: \"_clickHandler\",\n      value: function _clickHandler() {\n        this.terminalTarget.nativeElement.focus();\n        this.terminal.nativeElement.classList.toggle('cc_terminal_focused', true);\n      }\n    }, {\n      key: \"_blur\",\n      value: function _blur() {\n        clearInterval(this._hasFocus);\n\n        if (!this._mOver) {\n          this._cursor = '_';\n        }\n\n        this.terminal.nativeElement.classList.toggle('cc_terminal_focused', false);\n      }\n      /**\n       * @description - This will called when user will focus on input\n       */\n\n    }, {\n      key: \"_focus\",\n      value: function _focus() {\n        var _this8 = this;\n\n        if (this._initial) {\n          this._tService.broadcast('terminal-output', {\n            details: {\n              result: [{\n                text: 'How can I help you?',\n                css: {\n                  color: 'red'\n                }\n              }],\n              breakLine: true,\n              output: true,\n              format: true\n            }\n          });\n        }\n\n        this._initial = false;\n        this._hasFocus = setInterval(function () {\n          if (_this8._cursor === '') {\n            _this8._cursor = '_';\n          } else {\n            _this8._cursor = '';\n          }\n        }, 500);\n      }\n    }, {\n      key: \"_key\",\n      value: function _key(e) {\n        if (this._showPrompt || this._allowTypingWriteDisplaying) {\n          this._keypress(e.which);\n        }\n\n        e.preventDefault();\n      }\n    }, {\n      key: \"_keypress\",\n      value: function _keypress(keyCode) {\n        if (this._command.length < 80) {\n          this._cmdIndex = -1;\n        }\n\n        if (keyCode !== 13) {\n          this._command += String.fromCharCode(keyCode);\n        }\n      }\n    }, {\n      key: \"_keydown\",\n      value: function _keydown(e) {\n        if (e.keyCode === 9) {\n          // Tab ke\n          e.preventDefault();\n        }\n\n        if (e.keyCode === 8) {\n          // Backspace key\n          if (this._showPrompt || this._allowTypingWriteDisplaying) {\n            this._backspace();\n          }\n\n          e.preventDefault();\n        } else if (e.keyCode === 13) {\n          // Enter key\n          if (this._showPrompt || this._allowTypingWriteDisplaying) {\n            this._execute();\n          }\n        } else if (e.keyCode === 38) {\n          // key-up\n          if (this._showPrompt || this._allowTypingWriteDisplaying) {\n            this._previousCommand();\n          }\n\n          e.preventDefault();\n        } else if (e.keyCode === 40) {\n          // key-down key\n          if (this._showPrompt || this._allowTypingWriteDisplaying) {\n            this._nextCommand();\n          }\n\n          e.preventDefault();\n        }\n      }\n    }, {\n      key: \"_nextCommand\",\n      value: function _nextCommand() {\n        if (this._cmdIndex === -1) {\n          return;\n        }\n\n        if (this._cmdIndex < this._cmdHistory.length - 1) {\n          this._command = this._cmdHistory[++this._cmdIndex];\n        } else {\n          this._command = '';\n        }\n      }\n    }, {\n      key: \"_previousCommand\",\n      value: function _previousCommand() {\n        if (this._cmdIndex === -1) {\n          this._cmdIndex = this._cmdHistory.length;\n        }\n\n        if (this._cmdIndex === 0) {\n          return;\n        }\n\n        this._command = this._cmdHistory[--this._cmdIndex];\n      }\n    }, {\n      key: \"_cleanNonPrintableCharacters\",\n      value: function _cleanNonPrintableCharacters(input) {\n        return input.replace(this._nonPrintRE, '');\n      }\n    }, {\n      key: \"_execute\",\n      value: function _execute() {\n        var command = this._cleanNonPrintableCharacters(this._command);\n\n        this._command = '';\n\n        if (!command) {\n          // return; // If you want to do nothing if command is only enter, un comment this.\n          this._tService.broadcast('terminal-output', {\n            details: {\n              output: true,\n              result: [{\n                text: this._prompt.text + this._command\n              }],\n              breakLine: true\n            }\n          });\n        }\n\n        if (this._cmdHistory.length > 10) {\n          this._cmdHistory.splice(0, 1);\n        }\n\n        if (command !== this._cmdHistory[this._cmdHistory.length - 1]) {\n          this._cmdHistory.push(command);\n        }\n\n        this._tService.broadcast('terminal-command', {\n          command: command\n        });\n      }\n    }, {\n      key: \"_backspace\",\n      value: function _backspace() {\n        if (this._command) {\n          this._command = this._command.substring(0, this._command.length - 1);\n        }\n      }\n    }], [{\n      key: \"_insertLineBreakToString\",\n      value: function _insertLineBreakToString(width, text, chr) {\n        var index = Math.round(width / 8);\n\n        if (text.length > index) {\n          // returns text with line-break chr added at element width offset ratio\n          return text.substr(0, index) + chr + text.substr(index + 1);\n        } else {\n          return text;\n        }\n      }\n      /**\n       * @description - This static function will clear the all output of the terminal commands\n       */\n\n    }, {\n      key: \"_clearTerminalResultsChildElements\",\n      value: function _clearTerminalResultsChildElements() {\n        var elements = document.getElementById('cc_terminal_results');\n\n        while (elements.firstChild) {\n          elements.removeChild(elements.firstChild);\n        }\n      }\n    }]);\n\n    return CcTerminalComponent;\n  }();\n\n  CcTerminalComponent.ɵfac = function CcTerminalComponent_Factory(t) {\n    return new (t || CcTerminalComponent)(i0.ɵɵdirectiveInject(i1.CcTerminalService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i2.CommandStore));\n  };\n\n  CcTerminalComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CcTerminalComponent,\n    selectors: [[\"cc-terminal\"]],\n    viewQuery: function CcTerminalComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n        i0.ɵɵviewQuery(_c2, 5);\n        i0.ɵɵviewQuery(_c3, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.terminal = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.terminalViewport = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.terminalResults = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.terminalTarget = _t.first);\n      }\n    },\n    inputs: {\n      ccStyle: \"ccStyle\",\n      ccPrompt: \"ccPrompt\"\n    },\n    features: [i0.ɵɵProvidersFeature([CommandStore])],\n    decls: 11,\n    vars: 6,\n    consts: [[\"id\", \"cc_terminal\", 1, \"cc_terminal\", 3, \"ngStyle\", \"mouseover\", \"mouseleave\", \"paste\"], [\"cc_terminal\", \"\"], [\"id\", \"cc_terminal_viewport\", 1, \"cc_terminal_viewport\", 3, \"ngStyle\", \"click\"], [\"cc_terminal_viewport\", \"\"], [\"id\", \"cc_terminal_results\", 1, \"cc_terminal_results\"], [\"cc_terminal_results\", \"\"], [\"class\", \"cc_terminal_prompt\", 4, \"ngIf\"], [\"class\", \"cc_terminal_input\", 3, \"ngStyle\", 4, \"ngIf\"], [\"class\", \"cc_terminal_cursor\", 3, \"ngStyle\", 4, \"ngIf\"], [\"type\", \"text\", \"id\", \"cc_terminal_target\", 1, \"cc_terminal_target\", 3, \"ngModel\", \"ngModelChange\", \"blur\", \"focus\", \"keydown\", \"keypress\"], [\"cc_terminal_target\", \"\"], [1, \"cc_terminal_prompt\"], [1, \"cc_terminal_input\", 3, \"ngStyle\"], [1, \"cc_terminal_cursor\", 3, \"ngStyle\"]],\n    template: function CcTerminalComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"section\", 0, 1);\n        i0.ɵɵlistener(\"mouseover\", function CcTerminalComponent_Template_section_mouseover_0_listener() {\n          return ctx._mouseover();\n        })(\"mouseleave\", function CcTerminalComponent_Template_section_mouseleave_0_listener() {\n          return ctx._mouseleave();\n        })(\"paste\", function CcTerminalComponent_Template_section_paste_0_listener($event) {\n          return ctx._handlePaste($event);\n        });\n        i0.ɵɵelementStart(2, \"div\", 2, 3);\n        i0.ɵɵlistener(\"click\", function CcTerminalComponent_Template_div_click_2_listener() {\n          return ctx._clickHandler();\n        });\n        i0.ɵɵelement(4, \"div\", 4, 5);\n        i0.ɵɵtemplate(6, CcTerminalComponent_span_6_Template, 2, 1, \"span\", 6);\n        i0.ɵɵtemplate(7, CcTerminalComponent_span_7_Template, 2, 2, \"span\", 7);\n        i0.ɵɵtemplate(8, CcTerminalComponent_span_8_Template, 2, 2, \"span\", 8);\n        i0.ɵɵelementStart(9, \"input\", 9, 10);\n        i0.ɵɵlistener(\"ngModelChange\", function CcTerminalComponent_Template_input_ngModelChange_9_listener($event) {\n          return ctx._command = $event;\n        })(\"blur\", function CcTerminalComponent_Template_input_blur_9_listener() {\n          return ctx._blur();\n        })(\"focus\", function CcTerminalComponent_Template_input_focus_9_listener() {\n          return ctx._focus();\n        })(\"keydown\", function CcTerminalComponent_Template_input_keydown_9_listener($event) {\n          return ctx._keydown($event);\n        })(\"keypress\", function CcTerminalComponent_Template_input_keypress_9_listener($event) {\n          return ctx._key($event);\n        });\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngStyle\", ctx.ccStyle == null ? null : ctx.ccStyle.section);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngStyle\", ctx.ccStyle == null ? null : ctx.ccStyle.viewport);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx._showPrompt);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx._showPrompt);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx._showPrompt);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx._command);\n      }\n    },\n    directives: [i3.NgStyle, i3.NgIf, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgModel],\n    styles: [\".cc_terminal[_ngcontent-%COMP%]{background-color:#000;height:100vh;margin:auto;color:#12e012;font-family:monospace;overflow-x:hidden;overflow-y:hidden;font-size:12px;border:none;border-radius:0;text-shadow:0 0 6px rgba(255,255,255,.8);box-shadow:0 0 20px #12e012 inset,2px 2px 16px #000;transition:linear box-shadow .2s;padding:0;position:relative;overflow:hidden;clear:both}.cc_terminal_focused.cc_terminal[_ngcontent-%COMP%]{box-shadow:0 0 20px #12e012 inset,0 0 2px #000,0 0 16px #00af16d6;border:none}.cc_terminal_viewport[_ngcontent-%COMP%]{overflow-x:hidden;padding:0;height:94%;margin:15px;overflow-y:scroll}.cc_terminal_input[_ngcontent-%COMP%]{overflow-wrap:break-word}.cc_terminal_cursor[_ngcontent-%COMP%]{visibility:visible}.cc_terminal_cursor_hidden[_ngcontent-%COMP%]{display:none}.cc_terminal_target[_ngcontent-%COMP%]{vertical-align:bottom;opacity:0;color:transparent;height:1px;width:1px}.cc_terminal_results[_ngcontent-%COMP%]{display:block}.cc_terminal_line[_ngcontent-%COMP%]{padding:0;background-color:transparent;border:none;border-radius:0;margin:10px auto}\"]\n  });\n  return CcTerminalComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}