{"ast":null,"code":"import _toConsumableArray from \"/Users/pravin/workspace/code-world/cc-terminal/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _defineProperty from \"/Users/pravin/workspace/code-world/cc-terminal/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"/Users/pravin/workspace/code-world/cc-terminal/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/pravin/workspace/code-world/cc-terminal/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/pravin/workspace/code-world/cc-terminal/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/pravin/workspace/code-world/cc-terminal/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Store } from './store';\nimport { CommandState } from './cc-terminal-command-state';\nimport * as i0 from \"@angular/core\";\nexport var CommandStore = /*#__PURE__*/(function () {\n  var CommandStore = /*#__PURE__*/function (_Store) {\n    _inherits(CommandStore, _Store);\n\n    var _super = _createSuper(CommandStore);\n\n    function CommandStore() {\n      _classCallCheck(this, CommandStore);\n\n      return _super.call(this, new CommandState());\n    }\n\n    _createClass(CommandStore, [{\n      key: \"addKeyValue\",\n      value: function addKeyValue(command) {\n        this.setState(Object.assign(Object.assign({}, this.state), {\n          commands: this.state.commands.map(function (c) {\n            if (c.name === command.name) {\n              if (c.details && !c.details.readonly) {\n                if (!c['details'][command.key]) {\n                  c['details'][command.key] = null;\n                } // If key not exists, make one\n\n\n                return Object.assign(Object.assign({}, c), {\n                  details: Object.assign({}, Object.assign(Object.assign({}, c.details), _defineProperty({}, command.key, command.value)))\n                });\n              } else {\n                console.error('You are trying to modify the readonly command, which is not allowed, command name: ' + command.name);\n                return Object.assign({}, c); // You are trying modify readonly command, which is not possible.\n              }\n            }\n\n            return c;\n          })\n        }));\n      }\n      /**\n       * @description - This function will add the command\n       *\n       * @param command\n       */\n\n    }, {\n      key: \"addCommand\",\n      value: function addCommand(command) {\n        var _regex = /^[a-zA-Z]+$/;\n\n        if (command && command.name && _regex.test(command.name)) {\n          if (command && command.details && command.details.hasOwnProperty('output')) {\n            var exists = this.state.commands.map(function (e) {\n              return e.name;\n            }).indexOf(command.name);\n\n            if (exists === -1) {\n              this.setState(Object.assign(Object.assign({}, this.state), {\n                commands: [].concat(_toConsumableArray(this.state.commands), [command])\n              }));\n            } else {\n              console.error('You are trying to add duplicate command, which is not allowed, command name: ' + command.name); // alert('You are trying to add duplicate command, which is not allowed, command name: ' + command.name);\n              // throw 'You are trying to add duplicate command, which is not allowed, command name: ' + command.name;\n            }\n          } else {\n            console.error('To add a new command, we need output property, command name: ' + command.name);\n          }\n        } else {\n          console.error('Command name is not valid to add in command list, command name should be from [a-z | A-Z] without containing space, command name: ' + command.name);\n        }\n      }\n    }]);\n\n    return CommandStore;\n  }(Store);\n\n  CommandStore.ɵfac = function CommandStore_Factory(t) {\n    return new (t || CommandStore)();\n  };\n\n  CommandStore.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CommandStore,\n    factory: CommandStore.ɵfac\n  });\n  return CommandStore;\n})();","map":null,"metadata":{},"sourceType":"module"}