{"ast":null,"code":"import _classCallCheck from \"/Users/pravin/workspace/code-world/cc-terminal/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/pravin/workspace/code-world/cc-terminal/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { CcTerminalService } from '../../projects/cc-terminal/src/public_api';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../projects/cc-terminal/src/public_api\";\nimport * as i2 from \"../../projects/cc-terminal/src/lib/cc-terminal.component\";\nexport var AppComponent = /*#__PURE__*/(function () {\n  var AppComponent = /*#__PURE__*/function () {\n    function AppComponent(_tService) {\n      var _this = this;\n\n      _classCallCheck(this, AppComponent);\n\n      this.title = 'cc-terminal-app';\n      this._command = '';\n      this._prompt = {\n        end: '$',\n        user: 'Pravin',\n        separator: '@',\n        path: '\\\\'\n      };\n\n      this.registerExternalCommands = function () {\n        _this.store.addCommand({\n          name: 'about',\n          details: {\n            output: true,\n            breakLine: true,\n            readonly: true,\n            result: [{\n              text: 'This is a web based terminal, easy to use and register your commands and you can feel like using a actual terminal, make your website looks like terminal.'\n            }]\n          }\n        }); // TODO: Handle chain of commands using command service on demand through code (TBD: sync/async)\n\n\n        _this.store.addCommand({\n          name: 'example',\n          details: {\n            breakLine: true,\n            output: true,\n            readonly: false,\n            result: [{\n              text: function text() {\n                return 10 + 10;\n              }\n            }]\n          },\n          callback: function callback() {\n            _this._tService.broadcast('terminal-command', {\n              command: 'help'\n            }); // Execute command through code\n\n\n            _this._tService.broadcast('terminal-output', {\n              details: {\n                output: true,\n                breakLine: true,\n                result: [{\n                  text: 'yum yum'\n                }]\n              }\n            });\n\n            alert('done');\n          }\n        });\n      }; // this._tComponent._command = '';\n      // this._initializeConfig();\n\n\n      this._tService = _tService; // Add more config support, custom styling\n\n      this._styles = {\n        section: {\n          color: 'lightgreen',\n          background: 'black'\n        },\n        viewport: {\n          color: 'yellow',\n          background: 'black'\n        },\n        input: {\n          color: 'red',\n          background: 'black'\n        },\n        cursor: {\n          color: 'green',\n          background: 'black'\n        }\n      };\n      this.initService(); // Setup your custom commands\n    }\n\n    _createClass(AppComponent, [{\n      key: \"initService\",\n      value: function initService() {\n        var _this2 = this;\n\n        this._tService.on('store-ready').subscribe(function (_store) {\n          _this2.store = _store;\n\n          _this2.registerExternalCommands(); // Register External or your custom commands\n          // Note: you can also register your commands from here using _store also\n\n\n          _store.addCommand({\n            name: 'test',\n            details: {\n              output: true,\n              breakLine: true,\n              readonly: false,\n              result: [{\n                text: 'This is test command'\n              }]\n            }\n          });\n\n          _this2._tService.broadcast('terminal-output', {\n            details: {\n              output: true,\n              breakLine: true,\n              result: [{\n                text: 'Welcome Message on external project',\n                css: {\n                  color: 'pink'\n                }\n              }]\n            }\n          });\n        });\n      }\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        console.log('Custom App Initialized!');\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {}\n    }]);\n\n    return AppComponent;\n  }();\n\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.CcTerminalService));\n  };\n\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"cc-root\"]],\n    decls: 1,\n    vars: 2,\n    consts: [[2, \"height\", \"100%\", 3, \"ccStyle\", \"ccPrompt\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"cc-terminal\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ccStyle\", ctx._styles)(\"ccPrompt\", ctx._prompt);\n      }\n    },\n    directives: [i2.CcTerminalComponent],\n    styles: [\"\"]\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}